#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('homemanagerlocalserver:server');
const http = require('http');
const socketioJwt = require('socketio-jwt');
const LocalStorage = require('node-localstorage').LocalStorage;
const localStorage = new LocalStorage('./cache');
const client = require('../client');

const TOKEN_KEY = process.env.TOKEN_KEY;

const port = normalizePort(process.env.PORT || '3000');
const host = process.env.HOST || '0.0.0.0';
app.set('host', host);
app.set('port', port);
app.set('wsPort', port+575);

const server = http.createServer(app);
server.listen(app.get('port'), app.get('host'), () => {
  console.log(`http server listening on ${app.get('host')}:${app.get('port')}`);
});
server.on('error', onError);
server.on('listening', onListening);

const wsServer = http.createServer(app);
const io = require('socket.io')(wsServer);

io.set('authorization', socketioJwt.authorize({
  secret: TOKEN_KEY,
  handshake: true
}));

const clientToken = client.getClientToken();
let wssClient;
clientToken
  .then(res => {
    console.log(res.data);
    let token = JSON.parse(res.data).token;
    if (token) {
      localStorage.setItem('token', token);
      let clientSocket = client.getSocket(token);
      clientSocket
        .then(socket => {
          // require('../routes/climateSocket')(io, wssClient);
          const climateSocket = require('../routes/climateSocket');
          climateSocket(io, wssClient);
          // require('../routes/garageDoorSocket')(io, wssClient);

          wsServer.listen(app.get('wsPort'), () => {
            console.log(`ws server listening on ${app.get('host')}:${app.get('wsPort')}`);
          });
        })
        .catch(err => {
          console.log('Failed to connect to socket');
        });
    }
  })
  .catch(err => {
    console.log(err);
  });

// const wssClient = require('../client').getSocket();

// const storedToken = localStorage.getItem('token');
// const socket = socketClient(`${process.env.HOSTNAME}`, {query: {token: storedToken}});
// return socket;

// require('../routes/climateSocket')(io, wssClient);
// // require('../routes/garageDoorSocket')(io, wssClient);
//
// wsServer.listen(app.get('wsPort'), () => {
//   console.log(`ws server listening on ${app.get('host')}:${app.get('wsPort')}`);
// });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
