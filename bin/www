#!/usr/bin/env node

const app = require('../app');
const debug = require('debug')('homemanagerlocalserver:server');
const http = require('http');
const LocalStorage = require('node-localstorage').LocalStorage;
const localStorage = new LocalStorage('./local-storage');
const client = require('../client');

const port = normalizePort(process.env.PORT || '3000');
app.set('port', port);
app.set('wsPort', port+574);

const server = http.createServer(app);
server.listen(app.get('port'), () => {
  console.log(`http server listening on port ${app.get('port')}`);
});
server.on('error', onError);
server.on('listening', onListening);

const wsServer = http.createServer(app);
const io = require('socket.io')(wsServer, {'pingInterval': 25000, 'pingTimeout': 5000});

const clientToken = client.getClientToken();
clientToken
  .then(res => {
    if (!res.success || !res.token) {
      console.error('Error connecting to WSS');
      return;
    }
    console.log('Logged into cloud server');
    localStorage.setItem('token', res.token);
    const clientSocket = client.getSocket(res.token);
    clientSocket
      .then(socket => {

        require('../routes/climateSocket')(io, socket);

        wsServer.listen(app.get('wsPort'), () => {
          console.log(`ws server listening on port ${app.get('wsPort')}`);
        });
      })
      .catch(err => {
        console.log('Failed to connect to socket', err);
      });
  })
  .catch(err => {
    console.log('An error occurred connecting to cloud', err.statusCode, err.message);
  });

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
